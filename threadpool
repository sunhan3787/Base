为什么要使用线程池？
创建线程和销毁线程的花销是比较大的，这些时间有可能比处理业务的时间还要长。这样频繁的创建线程和销毁线程，再加上业务工作线程，消耗系统资源的时间，可能导致系统资源不足。（我们可以把创建和销毁的线程的过程去掉）
线程池有什么作用？
1、提高效率 创建好一定数量的线程放在池中，等需要使用的时候就从池中拿一个，这要比需要的时候创建一个线程对象要快的多。
2、方便管理 可以编写线程池管理代码对池中的线程同一进行管理，比如说启动时有该程序创建100个线程，每当有请求的时候，就分配一个线程去工作，如果刚好并发有101个请求，那多出的这一个请求可以排队等候，避免因无休止的创建线程导致系统崩溃


并发量：服务器同时承载的客户端数量（需要满足客户端对应的客户端要求），如果只算连接数只是基础条件。
需要满足客户端对应的客户端要求：例如微信：1.登陆注册；2.聊天、发送图片/发送语音；
3.红包/体现；4.心跳包；

用户信息存储：
Mysql,访问速度慢；支持并发差点；
Redis:访问速度快；

策略1：1.write_to_redis写一次缓存；
2.write_to_mysql做数据持久化；
策略2：1.write_to_mysql
2.数据由mysql 同步到redis
避免因为redis挂掉而导致数据丢失；（注册）引入一个开源的中间件MQ消息队列
MQ用来做消息的解耦；

MongoDB:应用场景：越近的数据访问次数越多（存储在内存），越久远的数据访问次数越少（存储在磁盘），一级一级的数据进行归档；
即时通信中的聊天记录，微信的朋友圈；
Redis占用内存没有MongoDB占用内存多；
dfs组件:
即时通信:
1.接入层：Nginx,nginx做分流到机器中；
2.业务逻辑部分；threadpool;
3.中间件；Redis,mysql,MongoDB,zeromq;支持系统完善的运行；zookeeper,docker,集群；

线程池应用场景：进程间通信的管道不适用threadpool,管道本身就是一个文件；
1.数据落盘，对日志的存储；
2.对IO的操作；

Q1.对一个线程池进行放缩；
什么时候添加线程；
Free_thread/sum_thread <40%,增加线程；

什么时候释放线程；
Free_thread/sum_thread >80%, 释放线程

Q2.线程池类型：
和CPU挂钩的线程池注重计算：n_threads=CPU*2
放缩型线程池->注重业务

Threadpool封装成库：宏定义，
简单Threadpool的实现；
/*add from head*/
 #define LL_ADD(item, list)do{              \
 	item->prev = NULL;                      \
 	item->next = list;                      \
 	if(list != NULL)list->prev = item;      \
 	list = item;                            \	
}while(0)

#define LL_REMOVE(item, list)do{                           \
	if(item->prev != NULL)item->prev->next = item->next;   \
	if(item->next != NULL)item->next->prev = item->prev;   \
	if(list == item)list = item->next;                     \
	item->prev = item->next = NULL;                        \
}while(0)
/*do{}while(0)*/

typedef struct NWORKER{
	pthread_t threadid;
	int terminate;    /*work status*/
	int flag;
	struct NMANAGER * pool;
	struct NWORKER * next;
	struct NWORKER * prev;
}nWorker;

typedef struct NJOB{

	void (* func)(void * arg);  /*call back function*/
	void* user_data;
	struct NJOB * next;
	struct NJOB * prev;
}nJob;

typedef struct NMANAGER{
	nWorker *workers;
	nJob *jobs;
	int  numWorkers;  /*number of working workers*/
	int sum_thread;
	int free_thread;
//	struct NWORKER *pool;
	
	/*avoid works work in the save job, */
	pthread_mutex_t * jobs_mtx;
	pthread_cond_t * jobs_cond;;
}nManager;

typedef nManager nThreadpool;

/*thread callback function*/
void * nWorkerCallback(void * arg)
{
	nWorker * worker = (nWorker*)arg;
	/*
	1.Is jobs list empty
	2.LL_remove(item, jobs)
	3.jobs->func(jobs); job entry function;
	*/
	while(1){

		pthread_mutex_lock(&worker->pool->jobs_mtx);
		while(NULL == worker->pool->jobs){
			if(worker->terminate == 1)break;
			/*unlock in wait and lock*/
			pthread_cond_wait(worker->pool->jobs_cond, &worker->pool->jobs_mtx);
			
		}

		if(worker->terminate == 1){
			pthread_mutex_unlock(&worker->pool->jobs_mtx);
			break;
		}

		nJob * job = worker->pool->jobs;
		LL_REMOVE(job, worker->pool->jobs_mtx);

		/*entry task*/
		worker->pool->free_thread --;
		job->func(job->user_data);
		worker->pool->free_thread ++;
		/*end task*/
		
		free(job);

	}

	free(worker);
}

int nThreadpoolCreate(nThreadpool * pool, int numWorkers)
{
	if(NULL == pool)return -1;
	if(numWorkers < 1)numWorkers = 1;
	memset(pool, 0, sizeof(nThreadpool));
  
	pthread_mutex_t blank_mutex = PTHREAD_MUTEX_INITIALIZER;
	memcpy(&pool->jobs_mtx, &blank_mutex, sizeof(pthread_mutex_t));

	pthread_cond_t blank_cond = PTHREAD_COND_INITIALIZER;
	memcpy(&pool->jobs_cond, &blank_cond, sizeof(pthread_cond_t));

	int i = 0;
	for(i = 0; i < numWorkers; i++){
		nWorker * worker = (nWorker*)malloc(sizeof(nWorker));

		if(NULL == worker){
			perror("malloc");
			return 1;
		}

		memset(worker, 0, sizeof(nWorker));

		/*thread stack size default*/
		int ret = pthread_create(&worker->threadid, NULL,nWorkerCallback);
		if(ret){
			perror("pthread_create");
			//free(worker);
			nWorker * w = pool->workers;
			for(w = pool->workers; w != NULL; w = w->next){
				w->terminate = 1;
				/*release every workers in pool*/
			}
			return 1;
		}
		LL_ADD(worker, pool->workers);
		
	}
	return 0;
}


int nThreadPoolDestory(nThreadpool * pool)
{
	nWorker * w = pool->workers;
	for(w = pool->workers; w != NULL; w = w->next){
		w->terminate = 1;
		/*release every workers in pool*/
	}
	
	pthread_mutex_lock(&pool->jobs_mtx);

	pthread_cond_broadcast(&pool->jobs_cond);
	pthread_mutex_unlock(&pool->jobs_mtx);
}

/*push task into jobs*/
int nThreadPoolPushJob(nThreadpool * pool, nJob * job)
{
	pthread_mutex_lock(&pool->jobs_mtx);
	
/**/
	LL_ADD(job, pool->jobs);

	pthread_cond_signal(&pool->jobs_cond);
	pthread_mutex_unlock(&pool->jobs_mtx);
}
